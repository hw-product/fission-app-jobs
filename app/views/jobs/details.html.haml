- content_for(:percent_complete) do
  #percent-complete= "#{@job.percent_complete}%"

:ruby
  state = case @job.status
    when :success, :complete
      'success'
    when :error
      'danger'
    when :active
      'warning'
    else
      'info'
    end

  status = "<div class='text-#{state}'>#{@job.status.to_s.humanize}</div>".html_safe
  table_data = [
    ['Job ID', @job.message_id],
    ['Timestamp', @job.created_at.strftime('%Y/%m/%d %H:%M:%S %Z')],
    ['Status', status],
    ['Completed', yield(:percent_complete)]
  ]
  header_classes = [
    'col-md-2',
    'col-md-8'
  ]

  :ruby
    if(@job.payload.get(:data, :code_fetcher, :info))
      repo_name = @job.payload.get(:data, :code_fetcher, :info, :name)
      repo_url = @job.payload.get(:data, :code_fetcher, :info, :url)
      account_name = @job.payload.get(:data, :code_fetcher, :info, :owner)
      account_url = @job.payload.get(:data, :code_fetcher, :info, :url).sub(
        /#{Regexp.escape(@job.payload.get(:data, :code_fetcher, :info, :name))}.*$/, ''
      )
      repo_ref = @job.payload.get(:data, :code_fetcher, :info, :reference).gsub('refs/','')
      ref_url = "#{@job.payload.get(:data, :github, :head_commit, :url)}/releases/#{@job.payload.get(:data, :github, :ref).gsub('refs/tags/','tag/')}"
      commit_sha = @job.payload.get(:data, :code_fetcher, :info, :commit_sha).to_s.slice(0, 7)
      commit_url = @job.payload.get(:data, :github, :head_commit, :url)

      table_data = [
        ['Account', account_name ? link_to(account_name, account_url) : 'N/A'],
        ['Repository', repo_name ? link_to(repo_name, repo_url) : 'N/A'],
        ['Reference', ref_url ? link_to(repo_ref, ref_url) : repo_ref],
        ['Commit', commit_url ? link_to(commit_sha, commit_url) : commit_sha]
      ] + table_data
    end

- content_for(:job_metadata_panel_header) do
  - job_type = request.path.split('/')[1].capitalize
  %h3= "#{job_type} Job: #{@job.message_id}"

- content_for(:job_metadata_panel_content) do
  = render(:partial => 'layouts/table',    |
           :locals => { :header_classes => header_classes, :data => table_data})

- content_for(:job_error) do
  - if @job.status == :error
    .alert.alert-danger
      %b
        %span.glyphicon.glyphicon-warning-sign
        Error:
      = @job.payload.fetch(:error, :reason, 'No reason provided')

- content_for(:job_output) do
  - if @logs && !@logs.empty?
    %ul.list-group
      - @logs.each do |name, value|
        - if Rails.env.to_s == 'development'
          %li.list-group-item.log{'data-text' => value, :style => 'cursor: pointer'}
            %span.fa.fa-file-text-o
            %span= "#{name.capitalize} Logs"
        - else
          %li.list-group-item.log{'data-url' => value, :style => 'cursor: pointer'}
            %span.fa.fa-file-text-o
            %span= "#{name.capitalize} Logs"

  - if content_for?(:panel_body)
    = content_for(:panel_body)
  - else
    .panel.panel-default
      .panel-heading
        .panel-title
          %a.accordion-toggle{'data-toggle' => 'collapse', :href => '#payload-display'}
            %span.fa.fa-file-code-o
            %span= "Payload"
      .panel-collapse.collapse#payload-display
        .panel-body.payload
          %pre.highlight.json#job-payload~ JSON.pretty_generate(@job.payload.fetch(:data, {}).to_hash)

- content_for(:events) do
  #job-events.panel.panel-default{'last-id' => @job.events.all.last.try(:id) || 0}
    .panel-heading
      .panel-title
        %a.accordion-toggle{'data-toggle' => 'collapse', :href => '#events-display'}
          %span.fa.fa-terminal
          %span= 'Events'
    .panel-collapse#events-display{:class => @job.status == :active ? '' : 'collapse'}
      .panel-body.events
        :ruby
          event_output = @job.events.order(:stamp.asc).all.map do |event|
            next if event.data[:service_name] == 'router'
            render :partial => 'jobs/event', :locals => {:event => event}
          end.compact.map(&:strip).join("\n").html_safe
        %pre.pre-scrollable~ event_output

- content_for(:container) do
  = render(:partial => 'layouts/panel',                           |
           :locals => {                                           |
             :heading => content_for(:job_metadata_panel_header), |
             :panel_class => "panel-#{state} widget",             |
             :panel_content => content_for(:job_metadata_panel_content)})

  = content_for(:job_error)
  = content_for(:events)
  = content_for(:job_output)

= render(:partial => 'layouts/container',                            |
         :locals => { :container_content => content_for(:container), |
                      :container_id => 'fission-job' })

:javascript
  $(document).ready(
    function(){
      $('.log').click(function(){
        if($(this).attr('data-url')){
          window_rails.create_window({
            name: 'log',
            title: 'Log file: ' + $(this).text(),
            size: 'large',
            content: '<div id="log-position">Loading...</div>'
          });
          $.ajax({
            url: $(this).attr('data-url'),
            type: 'GET'
          }).error(function(data, status){
            $('#log-position').html('<b>ERROR:</b> ' + data.responseText);
          }).success(function(data){
            $('#log-position').html('<pre>' + data + '</pre>');
          });
        }
        else {
          window_rails.create_window({
            name: 'log',
            title: 'Log file: ' + $(this).text(),
            size: 'large',
            content: $(this).attr('data-text')
          });
        }
        window_rails.open_window('log', {});
      });
    }
  );

- if @job.status.to_sym == :active
  :javascript
    function update_job(){
      $.ajax({
        url: '#{send("#{@namespace}_job_status_path", @job.message_id)}',
        type: 'GET',
        data: {last_id: $('#job-events').attr('last-id')}
      }).complete(function(){
        setTimeout(function(){ update_job(); }, 10000);
      });
    }
    $(document).ready(function(){ update_job(); });
